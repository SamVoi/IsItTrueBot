#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ IsItTrueBot
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from unittest.mock import Mock, AsyncMock
from telegram import Update, Message, User, Chat
from telegram.ext import ContextTypes
from src.bot import IsItTrueBot


async def test_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–¥–∞–Ω
    import os
    if not os.getenv('BOT_TOKEN'):
        os.environ['BOT_TOKEN'] = 'test_token_123:fake_token_for_testing'
        os.environ['BOT_USERNAME'] = 'TestBot'
    
    try:
        bot = IsItTrueBot()
        print("‚úÖ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {bot.stats['total_queries']}")
        print(f"   –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {bot.stats['text_queries']}")
        print(f"   –ö–Ω–æ–ø–æ—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {bot.stats['button_queries']}")
        print(f"   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {bot.stats['start_time']}")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        mock_user = Mock(spec=User)
        mock_user.id = 12345
        mock_user.first_name = "Test User"
        
        mock_chat = Mock(spec=Chat)
        mock_chat.id = 12345
        mock_chat.type = "private"
        
        mock_message = Mock(spec=Message)
        mock_message.reply_text = AsyncMock()
        mock_message.chat = mock_chat
        
        mock_update = Mock(spec=Update)
        mock_update.message = mock_message
        mock_update.effective_user = mock_user
        
        mock_context = Mock(spec=ContextTypes.DEFAULT_TYPE)
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥:")
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º /start...")
        await bot.cmd_start(mock_update, mock_context)
        print("   ‚úÖ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º /help...")
        await bot.cmd_help(mock_update, mock_context)
        print("   ‚úÖ /help –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /stats
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º /stats...")
        await bot.cmd_stats(mock_update, mock_context)
        print("   ‚úÖ /stats –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã reply_text
        call_count = mock_message.reply_text.call_count
        print(f"\nüì§ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {call_count}")
        
        if call_count >= 3:
            print("‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ù–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å")
            
        print("\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤:")
        for i, call in enumerate(mock_message.reply_text.call_args_list):
            message_text = call[0][0]
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {message_text[:50]}...")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False
    
    return True


async def test_stats_update():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    import os
    if not os.getenv('BOT_TOKEN'):
        os.environ['BOT_TOKEN'] = 'test_token_123:fake_token_for_testing'
    
    bot = IsItTrueBot()
    
    initial_queries = bot.stats['total_queries']
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    for i in range(5):
        bot._update_stats()
        bot.stats['text_queries'] += 1
        bot.stats['categories']['positive'] += 1
    
    print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –¥–æ: {initial_queries}")
    print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ: {bot.stats['total_queries']}")
    print(f"   –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {bot.stats['text_queries']}")
    print(f"   –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {bot.stats['categories']['positive']}")
    
    if bot.stats['total_queries'] > initial_queries:
        print("   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("   ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è IsItTrueBot...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥
    commands_ok = await test_commands()
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats_ok = await test_stats_update()
    
    print("\n" + "=" * 50)
    if commands_ok and stats_ok:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üìù –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ /start, /help, /stats")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        
    print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python src/bot.py")


if __name__ == "__main__":
    asyncio.run(main())