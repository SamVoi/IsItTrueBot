#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent
sys.path.append(str(project_root))

from src.bot import IsItTrueBot
from src.response_generator import response_generator

def test_format_query_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞"""
    bot = IsItTrueBot()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_cases = [
        {
            'query': '–ø—Ä–∞–≤–¥–∞ —á—Ç–æ –≤–æ–¥–∞ –º–æ–∫—Ä–∞—è?',
            'response': '‚úÖ –î–∞, —ç—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–¥–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º',
            'category': 'positive'
        },
        {
            'query': '–∑–µ–º–ª—è –ø–ª–æ—Å–∫–∞—è?',
            'response': '‚ùå –ù–µ—Ç, —ç—Ç–æ –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–æ —Ñ–∞–∫—Ç—á–µ–∫–µ—Ä–∞–º–∏',
            'category': 'negative'
        },
        {
            'query': '–∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –¥–æ–∂–¥—å?',
            'response': '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–¥–∞, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤–∞–∂–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞',
            'category': 'uncertain'
        }
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –û–¢–í–ï–¢–û–í –° –ó–ê–ü–†–û–°–ê–ú–ò")
    print("=" * 60)
    
    for i, test_case in enumerate(test_cases, 1):
        query = test_case['query']
        response = test_case['response']
        category = test_case['category']
        
        formatted = bot._format_query_response(query, response, category)
        
        print(f"\nüìù –¢–µ—Å—Ç {i}: {category}")
        print(f"   –ó–∞–ø—Ä–æ—Å: {query}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print("   " + "‚îÄ" * 50)
        for line in formatted.split('\n'):
            print(f"   {line}")
        print("   " + "‚îÄ" * 50)

def test_response_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\n\nüé≤ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –°–õ–£–ß–ê–ô–ù–´–• –û–¢–í–ï–¢–û–í")
    print("=" * 60)
    
    for i in range(3):
        response_text, category = response_generator.generate_random_response()
        print(f"\n{i+1}. –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        print(f"   –û—Ç–≤–µ—Ç: {response_text}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è IsItTrueBot")
        print()
        
        test_format_query_response()
        test_response_generation()
        
        print("\n\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        print("   1. –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: @bot_name ‚Üí –∫–Ω–æ–ø–∫–∞ ‚Üí —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç")
        print("   2. –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: @bot_name –ø—Ä–∞–≤–¥–∞ —á—Ç–æ –≤–æ–¥–∞ –º–æ–∫—Ä–∞—è? ‚Üí –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞")
        print("\nüìã –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞):")
        print("   üìù –ó–∞–ø—Ä–æ—Å: \"–≤–∞—à –≤–æ–ø—Ä–æ—Å\"")
        print("   ‚úÖ/‚ùå/‚ö†Ô∏è [–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç]")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()