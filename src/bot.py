import sys
import sys
import logging
from pathlib import Path
from datetime import datetime
from collections import defaultdict

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from telegram import Update, InlineQueryResultArticle, InputTextMessageContent, InlineQueryResultsButton
from telegram.ext import Application, InlineQueryHandler, ContextTypes, CommandHandler
from config.settings import BotConfig
from src.response_generator import response_generator


class IsItTrueBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ "–≠—Ç–æ –ø—Ä–∞–≤–¥–∞?"
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline-–∑–∞–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ "—Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥–æ–≤—ã–µ" –æ—Ç–≤–µ—Ç—ã.
    """
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        BotConfig.setup_logging()
        self.logger = logging.getLogger(__name__)
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø–∞–º—è—Ç–∏ (–±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
        self.stats = {
            'start_time': datetime.now(),
            'total_queries': 0,
            'text_queries': 0,
            'button_queries': 0,
            'categories': defaultdict(int),
            'today_queries': 0,
            'last_reset': datetime.now().date()
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–æ—Ç–∞
        try:
            BotConfig.validate_config()
        except ValueError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            raise
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
        # –ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ config –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ BOT_TOKEN –Ω–µ None
        bot_token = BotConfig.BOT_TOKEN
        assert bot_token is not None, "BOT_TOKEN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
        self.application = Application.builder().token(bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        self.logger.info("–ë–æ—Ç '–≠—Ç–æ –ø—Ä–∞–≤–¥–∞?' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler('start', self.cmd_start))
        self.application.add_handler(CommandHandler('help', self.cmd_help))
        self.application.add_handler(CommandHandler('stats', self.cmd_stats))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤
        inline_handler = InlineQueryHandler(self.handle_inline_query)
        self.application.add_handler(inline_handler)
    
    async def handle_inline_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline-–∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ inline_query —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not update.inline_query:
            self.logger.warning("–ü–æ–ª—É—á–µ–Ω update –±–µ–∑ inline_query")
            return
            
        query = update.inline_query.query
        user_id = update.inline_query.from_user.id if update.inline_query.from_user else "unknown"
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω inline-–∑–∞–ø—Ä–æ—Å: '{query}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        query_text = query.strip()
        has_text_query = bool(query_text)
        
        if has_text_query:
            # –†–µ–∂–∏–º —Å —Ç–µ–∫—Å—Ç–æ–º: —Å—Ä–∞–∑—É –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
            response_text, category = response_generator.generate_random_response()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
            formatted_response = self._format_query_response(query_text, response_text, category)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['text_queries'] += 1
            self.stats['categories'][category] += 1
            
            results = [
                InlineQueryResultArticle(
                    id="fact_check_query_result",
                    title=f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {query_text[:50]}{'...' if len(query_text) > 50 else ''}",
                    description="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–∞–∫—Ç—á–µ–∫–∞",
                    input_message_content=InputTextMessageContent(
                        message_text=formatted_response,
                        parse_mode=None
                    ),
                    thumbnail_url=self._get_neutral_icon_url()
                )
            ]
            
            self.logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query_text[:30]}...'")
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            self.stats['button_queries'] += 1
            results = [
                InlineQueryResultArticle(
                    id="fact_check_result",
                    title=BotConfig.INLINE_COMMAND_TEXT,
                    description=BotConfig.INLINE_COMMAND_DESCRIPTION,
                    input_message_content=InputTextMessageContent(
                        message_text=self._generate_delayed_response(),
                        parse_mode=None
                    ),
                    thumbnail_url=self._get_neutral_icon_url()
                )
            ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.inline_query.answer(
            results,
            cache_time=0,  # –ù–µ –∫–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            is_personal=True,
            button=InlineQueryResultsButton(
                text="–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
                start_parameter="help"
            )
        )
    
    def _generate_delayed_response(self) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ inline —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        
        Returns:
            str: –°–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        response_text, category = response_generator.generate_random_response()
        self.logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–≤–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {response_text[:50]}...")
        return response_text
    
    def _format_query_response(self, query_text: str, response_text: str, category: str) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞.
        
        Args:
            query_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response_text: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ - —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        formatted_response = f"üìù –ó–∞–ø—Ä–æ—Å: \"{query_text}\"\n\n{response_text}"
        
        return formatted_response
    
    def _get_neutral_icon_url(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –≤—ã–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞—Ä–∞–Ω–µ–µ.
        
        Returns:
            str: URL –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–π –∏–∫–æ–Ω–∫–∏
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        return 'https://img.icons8.com/color/48/question-mark.png'
    
    def _get_category_icon_url(self, category: str) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–∞.
        
        Args:
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            str: URL –∏–∫–æ–Ω–∫–∏
        """
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        icons = {
            'positive': 'https://img.icons8.com/color/48/checkmark.png',
            'negative': 'https://img.icons8.com/color/48/cancel.png', 
            'uncertain': 'https://img.icons8.com/color/48/question-mark.png'
        }
        return icons.get(category, icons['uncertain'])
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
        """
        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
        
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å inline-–∑–∞–ø—Ä–æ—Å–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(update, Update) and update.inline_query:
            try:
                await update.inline_query.answer([])
            except Exception as e:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ inline-–∑–∞–ø—Ä–æ—Å: {e}")
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        today = datetime.now().date()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if today != self.stats['last_reset']:
            self.stats['today_queries'] = 0
            self.stats['last_reset'] = today
        
        self.stats['total_queries'] += 1
        self.stats['today_queries'] += 1
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if not update.message:
            return
            
        start_message = (
            "ü§ñ **–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Ñ–∞–∫—Ç—á–µ–∫–µ—Ä!**\n\n"
            "üìù **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "1Ô∏è‚É£ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –ù–∞–ø–∏—à–∏—Ç–µ `@{bot_username}` –≤ –ª—é–±–æ–º —á–∞—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É\n"
            "2Ô∏è‚É£ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: `@{bot_username} –≤–∞—à –≤–æ–ø—Ä–æ—Å`\n\n"
            "üéØ **–ü—Ä–∏–º–µ—Ä:** `@{bot_username} –ø—Ä–∞–≤–¥–∞ —á—Ç–æ –≤–æ–¥–∞ –º–æ–∫—Ä–∞—è?`\n\n"
            "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã: /help - –ø–æ–º–æ—â—å, /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        ).format(bot_username=BotConfig.BOT_USERNAME or 'bot_name')
        
        await update.message.reply_text(start_message, parse_mode='Markdown')
        user_id = update.effective_user.id if update.effective_user else 'unknown'
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        if not update.message:
            return
            
        help_message = (
            "üìö **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-—Ñ–∞–∫—Ç—á–µ–∫–µ—Ä—É**\n\n"
            "ü§î **–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?**\n"
            "–≠—Ç–æ —à—É—Ç–æ—á–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ñ–∞–∫—Ç—á–µ–∫–∏–Ω–≥ —á–µ—Ä–µ–∑ —á–µ—Å—Ç–Ω—ã–π —Ä–∞–Ω–¥–æ–º. –ù–µ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã —Å–µ—Ä—å—ë–∑–Ω–æ!\n\n"
            "üìù **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–π —á–∞—Ç –≤ Telegram\n"
            "2. –ù–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å: `@{bot_username}`\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é –∏–ª–∏ –¥–æ–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\n"
            "4. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
            "üé≤ **–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏:**\n"
            "‚úÖ 40% - –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
            "‚ùå 40% - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
            "‚ö†Ô∏è 20% - –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n\n"
            "üìà –ö–æ–º–∞–Ω–¥—ã: /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"
        ).format(bot_username=BotConfig.BOT_USERNAME or 'bot_name')
        
        await update.message.reply_text(help_message, parse_mode='Markdown')
        user_id = update.effective_user.id if update.effective_user else 'unknown'
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ /help –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        if not update.message:
            return
            
        uptime = datetime.now() - self.stats['start_time']
        uptime_str = f"{uptime.days} –¥–Ω. {uptime.seconds // 3600} —á. {(uptime.seconds % 3600) // 60} –º–∏–Ω."
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        total_responses = sum(self.stats['categories'].values())
        if total_responses > 0:
            positive_pct = (self.stats['categories']['positive'] / total_responses) * 100
            negative_pct = (self.stats['categories']['negative'] / total_responses) * 100
            uncertain_pct = (self.stats['categories']['uncertain'] / total_responses) * 100
        else:
            positive_pct = negative_pct = uncertain_pct = 0
        
        stats_message = (
            "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
            f"üîÑ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime_str}\n"
            f"üìÖ **–ó–∞ —Å–µ–≥–æ–¥–Ω—è:** {self.stats['today_queries']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            f"üìà **–í—Å–µ–≥–æ:** {self.stats['total_queries']} –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
            "üìä **–ü–æ —Ç–∏–ø–∞–º:**\n"
            f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ: {self.stats['text_queries']}\n"
            f"üîò –ö–Ω–æ–ø–∫–∞: {self.stats['button_queries']}\n\n"
        )
        
        if total_responses > 0:
            stats_message += (
                "üéØ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:**\n"
                f"‚úÖ –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ: {self.stats['categories']['positive']} ({positive_pct:.1f}%)\n"
                f"‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ: {self.stats['categories']['negative']} ({negative_pct:.1f}%)\n"
                f"‚ö†Ô∏è –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ: {self.stats['categories']['uncertain']} ({uncertain_pct:.1f}%)\n"
            )
        
        stats_message += "\nüìå *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*"
        
        await update.message.reply_text(stats_message, parse_mode='Markdown')
        user_id = update.effective_user.id if update.effective_user else 'unknown'
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ '–≠—Ç–æ –ø—Ä–∞–≤–¥–∞?'...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        self.application.run_polling(
            allowed_updates=['inline_query', 'message']
        )


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        bot = IsItTrueBot()
        bot.run()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()