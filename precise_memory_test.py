#!/usr/bin/env python3
"""
–¢–æ—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
"""

import sys
from datetime import datetime, date
from collections import defaultdict


def get_size(obj, seen=None):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –≤ –ø–∞–º—è—Ç–∏"""
    size = sys.getsizeof(obj)
    if seen is None:
        seen = set()

    obj_id = id(obj)
    if obj_id in seen:
        return 0

    # –í–∞–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –º—ã —É–∂–µ –≤–∏–¥–µ–ª–∏ —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç
    seen.add(obj_id)

    if isinstance(obj, dict):
        size += sum([get_size(v, seen) for v in obj.values()])
        size += sum([get_size(k, seen) for k in obj.keys()])
    elif hasattr(obj, '__dict__'):
        size += get_size(obj.__dict__, seen)
    elif hasattr(obj, '__iter__') and not isinstance(obj, (str, bytes, bytearray)):
        size += sum([get_size(i, seen) for i in obj])

    return size


def measure_actual_memory():
    """–ò–∑–º–µ—Ä—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    print("üî¨ –¢–æ—á–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ IsItTrueBot")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫—É—é –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–∞–∫ –≤ –±–æ—Ç–µ
    stats = {
        'start_time': datetime.now(),
        'total_queries': 0,
        'text_queries': 0,
        'button_queries': 0,
        'categories': defaultdict(int),
        'today_queries': 0,
        'last_reset': datetime.now().date()
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    stats['categories']['positive'] = 0
    stats['categories']['negative'] = 0
    stats['categories']['uncertain'] = 0
    
    print("üìä –†–∞–∑–º–µ—Ä—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    print(f"   datetime.now(): {sys.getsizeof(stats['start_time'])} bytes")
    print(f"   int (0): {sys.getsizeof(0)} bytes")
    print(f"   date.today(): {sys.getsizeof(stats['last_reset'])} bytes")
    print(f"   defaultdict: {sys.getsizeof(stats['categories'])} bytes")
    print(f"   –±–∞–∑–æ–≤—ã–π dict: {sys.getsizeof({})} bytes")
    
    # –ò–∑–º–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    total_size = get_size(stats)
    
    print(f"\nüíæ –û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
    print(f"   –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {total_size} bytes ({total_size / 1024:.3f} KB)")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º –æ–±—ä–µ–º–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
    scenarios = [
        (10, "–ú–∞–ª–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"),
        (100, "–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä—É–∑–∫–∞"), 
        (10000, "–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"),
        (1000000, "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
    ]
    
    print(f"\nüìà –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫:")
    print("-" * 60)
    
    for queries, description in scenarios:
        # –ö–æ–ø–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        test_stats = {
            'start_time': datetime.now(),
            'total_queries': queries,
            'text_queries': queries // 2,
            'button_queries': queries // 2,
            'categories': defaultdict(int),
            'today_queries': min(queries, 10000),  # –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
            'last_reset': datetime.now().date()
        }
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (40%/40%/20%)
        test_stats['categories']['positive'] = int(queries * 0.4)
        test_stats['categories']['negative'] = int(queries * 0.4) 
        test_stats['categories']['uncertain'] = int(queries * 0.2)
        
        size = get_size(test_stats)
        
        print(f"üìä {description} ({queries:,} –∑–∞–ø—Ä–æ—Å–æ–≤):")
        print(f"   –ü–∞–º—è—Ç—å: {size} bytes ({size / 1024:.3f} KB)")
        print(f"   –ù–∞ –∑–∞–ø—Ä–æ—Å: {size / queries:.6f} bytes")
        print()
    
    # –ò–∑–º–µ—Ä—è–µ–º –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞
    print("üî¢ –í–ª–∏—è–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —á–∏—Å–µ–ª –Ω–∞ –ø–∞–º—è—Ç—å:")
    print("-" * 40)
    
    number_tests = [0, 100, 10000, 1000000, 100000000]
    for num in number_tests:
        size = sys.getsizeof(num)
        print(f"   {num:>12,}: {size} bytes")
    
    print(f"\n‚úÖ –í—ã–≤–æ–¥: –ü–∞–º—è—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤!")
    print(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ~{max([sys.getsizeof(n) for n in number_tests]) - min([sys.getsizeof(n) for n in number_tests])} bytes")


def memory_efficiency_analysis():
    """–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    
    print(f"\n" + "=" * 60)
    print("‚ö° –ê–ù–ê–õ–ò–ó –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò:")
    print("=" * 60)
    
    base_stats = {
        'start_time': datetime.now(),
        'total_queries': 0,
        'text_queries': 0,
        'button_queries': 0,
        'categories': defaultdict(int),
        'today_queries': 0,
        'last_reset': datetime.now().date()
    }
    
    base_size = get_size(base_stats)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    sqlite_overhead = 50 * 1024  # ~50KB –¥–ª—è SQLite
    postgres_overhead = 20 * 1024 * 1024  # ~20MB –¥–ª—è PostgreSQL
    redis_overhead = 10 * 1024 * 1024  # ~10MB –¥–ª—è Redis
    
    print(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏:")
    print(f"   –ù–∞—à–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: {base_size:,} bytes")
    print(f"   SQLite (–º–∏–Ω–∏–º—É–º): {sqlite_overhead:,} bytes ({sqlite_overhead / base_size:.0f}x –±–æ–ª—å—à–µ)")
    print(f"   PostgreSQL (–º–∏–Ω–∏–º—É–º): {postgres_overhead:,} bytes ({postgres_overhead / base_size:.0f}x –±–æ–ª—å—à–µ)")
    print(f"   Redis (–º–∏–Ω–∏–º—É–º): {redis_overhead:,} bytes ({redis_overhead / base_size:.0f}x –±–æ–ª—å—à–µ)")
    
    print(f"\nüéØ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:")
    print("   ‚úÖ –ù—É–ª–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–≤—Å–µ –≤ –ø–∞–º—è—Ç–∏)")
    print("   ‚úÖ –ù–µ—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")  
    print("   ‚úÖ –ù–µ—Ç –¥–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("   ‚úÖ –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
    print("   ‚úÖ –ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
    print("   ‚úÖ –í—ã—Å–æ—á–∞–π—à–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å")
    
    print(f"\n‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:")
    print("   ‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ")
    print("   ‚Ä¢ –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("   ‚Ä¢ –ù–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏")
    
    print(f"\nüèÜ –ò–¥–µ–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è:")
    print("   ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("   ‚úÖ –ë—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
    print("   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤")
    print("   ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")


if __name__ == "__main__":
    measure_actual_memory()
    memory_efficiency_analysis()